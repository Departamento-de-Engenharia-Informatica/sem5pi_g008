name: Generate Burndown Chart (.NET)

on:
  schedule:
    - cron: "0 2 * * *"  # Executa todos os dias às 2h UTC
  workflow_dispatch:  # Permite execução manual

jobs:
  burndown:
    runs-on: ubuntu-latest  # Executa em um ambiente Ubuntu

    steps:
      # Verifica o código do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura o .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      # Instala dependências necessárias (ex: OxyPlot para gráficos)
      - name: Install dependencies
        run: |
          dotnet add package Newtonsoft.Json
          dotnet add package OxyPlot

      # Cria o projeto e roda o código para gerar o gráfico
      - name: Run Burndown Chart Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # O token de autenticação para GitHub API
        run: |
          dotnet new console -n BurndownChartApp  # Cria um novo projeto de console
          cd BurndownChartApp
          echo '
          using System;
          using System.Net.Http;
          using Newtonsoft.Json;
          using OxyPlot;
          using OxyPlot.Series;
          using System.Linq;
          using System.Collections.Generic;

          class Program {
              static async Task Main(string[] args) {
                  var githubToken = Environment.GetEnvironmentVariable("GITHUB_TOKEN");
                  var client = new HttpClient();
                  client.DefaultRequestHeaders.Add("Authorization", "Bearer " + githubToken);
                  var repoOwner = "usuario_ou_organizacao";  // Substitua pelo dono do repositório
                  var repoName = "nome_do_repositorio";     // Substitua pelo nome do repositório
                  var url = $"https://api.github.com/repos/{repoOwner}/{repoName}/issues?state=all";

                  var issuesResponse = await client.GetStringAsync(url);
                  var issues = JsonConvert.DeserializeObject<List<Issue>>(issuesResponse);

                  var sprintStart = new DateTime(2024, 12, 1);  // Data de início do sprint
                  var sprintEnd = new DateTime(2024, 12, 14);   // Data de término do sprint

                  var sprintDays = Enumerable.Range(0, (sprintEnd - sprintStart).Days + 1)
                      .Select(i => sprintStart.AddDays(i)).ToList();
                  var workRemaining = new List<int>();

                  foreach (var day in sprintDays) {
                      var remaining = issues.Count(issue => !issue.ClosedAt.HasValue || DateTime.Parse(issue.ClosedAt) > day);
                      workRemaining.Add(remaining);
                  }

                  var plotModel = new PlotModel { Title = "Burndown Chart" };
                  var lineSeries = new LineSeries { Title = "Realizado" };
                  for (int i = 0; i < sprintDays.Count; i++) {
                      lineSeries.Points.Add(new DataPoint(DateTimeAxis.ToDouble(sprintDays[i]), workRemaining[i]));
                  }

                  plotModel.Series.Add(lineSeries);
                  var plotFile = "burndown_chart.png";
                  var exporter = new PngExporter { Width = 800, Height = 600 };
                  exporter.ExportToFile(plotModel, plotFile);
              }
          }

          public class Issue {
              public string Title { get; set; }
              public DateTime? ClosedAt { get; set; }
          }
          ' > Program.cs
          dotnet run  # Executa o código

      # Publica o gráfico gerado nos artefatos para download
      - name: Upload Burndown Chart
        uses: actions/upload-artifact@v3
        with:
          name: burndown-chart
          path: BurndownChartApp/burndown_chart.png
